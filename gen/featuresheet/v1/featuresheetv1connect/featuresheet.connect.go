// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: featuresheet/v1/featuresheet.proto

package featuresheetv1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "github.com/stillmatic/featuresheet/gen/featuresheet/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// FeatureSheetServiceName is the fully-qualified name of the FeatureSheetService service.
	FeatureSheetServiceName = "featuresheet.v1.FeatureSheetService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// FeatureSheetServiceEvaluateProcedure is the fully-qualified name of the FeatureSheetService's
	// Evaluate RPC.
	FeatureSheetServiceEvaluateProcedure = "/featuresheet.v1.FeatureSheetService/Evaluate"
)

// FeatureSheetServiceClient is a client for the featuresheet.v1.FeatureSheetService service.
type FeatureSheetServiceClient interface {
	Evaluate(context.Context, *connect_go.Request[v1.EvaluateRequest]) (*connect_go.Response[v1.EvaluateResponse], error)
}

// NewFeatureSheetServiceClient constructs a client for the featuresheet.v1.FeatureSheetService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewFeatureSheetServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) FeatureSheetServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &featureSheetServiceClient{
		evaluate: connect_go.NewClient[v1.EvaluateRequest, v1.EvaluateResponse](
			httpClient,
			baseURL+FeatureSheetServiceEvaluateProcedure,
			opts...,
		),
	}
}

// featureSheetServiceClient implements FeatureSheetServiceClient.
type featureSheetServiceClient struct {
	evaluate *connect_go.Client[v1.EvaluateRequest, v1.EvaluateResponse]
}

// Evaluate calls featuresheet.v1.FeatureSheetService.Evaluate.
func (c *featureSheetServiceClient) Evaluate(ctx context.Context, req *connect_go.Request[v1.EvaluateRequest]) (*connect_go.Response[v1.EvaluateResponse], error) {
	return c.evaluate.CallUnary(ctx, req)
}

// FeatureSheetServiceHandler is an implementation of the featuresheet.v1.FeatureSheetService
// service.
type FeatureSheetServiceHandler interface {
	Evaluate(context.Context, *connect_go.Request[v1.EvaluateRequest]) (*connect_go.Response[v1.EvaluateResponse], error)
}

// NewFeatureSheetServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewFeatureSheetServiceHandler(svc FeatureSheetServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle(FeatureSheetServiceEvaluateProcedure, connect_go.NewUnaryHandler(
		FeatureSheetServiceEvaluateProcedure,
		svc.Evaluate,
		opts...,
	))
	return "/featuresheet.v1.FeatureSheetService/", mux
}

// UnimplementedFeatureSheetServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedFeatureSheetServiceHandler struct{}

func (UnimplementedFeatureSheetServiceHandler) Evaluate(context.Context, *connect_go.Request[v1.EvaluateRequest]) (*connect_go.Response[v1.EvaluateResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("featuresheet.v1.FeatureSheetService.Evaluate is not implemented"))
}
